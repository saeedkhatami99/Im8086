name: CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  linux-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            libsdl2-dev \
            libsdl2-image-dev \
            libgl1-mesa-dev \
            libncurses5-dev \
            clang-format \
            clang-tidy

      - name: Create build directory
        run: mkdir build

      - name: Configure CMake
        run: |
          cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DBUILD_TESTS=ON \
            --debug-output

      - name: Build
        run: |
          cd build
          make -j$(nproc)

      - name: Run tests
        run: |
          cd build
          ./test_emulator

      - name: Create portable package
        if: matrix.build_type == 'Release'
        run: |
          cd build
          rm -rf Im8086
          mkdir -p Im8086
          mkdir -p Im8086/samples/txt
          mkdir -p Im8086/samples/asm
          mkdir -p Im8086/resources
          mkdir -p Im8086/lib

          cp Im8086 Im8086/ 2>/dev/null || true
          cp test_emulator Im8086/ 2>/dev/null || true
          if [ -f "test_gui" ]; then cp test_gui Im8086/; fi

          cp ../samples/sample_*.txt Im8086/samples/txt/ 2>/dev/null || true
          cp ../samples/tui/sample_*.asm Im8086/samples/asm/ 2>/dev/null || true

          if [ -d "../resources" ]; then
            cp ../resources/*.png Im8086/resources/ 2>/dev/null || true
          fi

          if [ -f "Im8086/Im8086" ]; then
            echo "Detecting and bundling shared libraries..."

            LIBS=$(ldd Im8086/Im8086 | grep -E "(SDL2|ncurses|tinfo|GL)" | awk '{print $3}' | grep -v "not found" | sort -u)
            
            for lib in $LIBS; do
              if [ -f "$lib" ]; then
                echo "Bundling library: $lib"
                cp "$lib" Im8086/lib/
                
                lib_name=$(basename "$lib")
                lib_base=$(echo "$lib_name" | sed 's/\.so\..*/\.so/')
                if [ "$lib_base" != "$lib_name" ]; then
                  lib_dir=$(dirname "$lib")
                  find "$lib_dir" -name "$lib_base*" -type f -exec cp {} Im8086/lib/ \; 2>/dev/null || true
                fi
              fi
            done
            
            if [ "$(ls -A Im8086/lib 2>/dev/null)" ]; then
              echo '#!/bin/bash' > Im8086/launch.sh
              echo 'DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"' >> Im8086/launch.sh
              echo 'export LD_LIBRARY_PATH="$DIR/lib:$LD_LIBRARY_PATH"' >> Im8086/launch.sh
              echo 'exec "$DIR/Im8086" "$@"' >> Im8086/launch.sh
              chmod +x Im8086/launch.sh
              echo "Created portable launcher with bundled libraries"
              echo "Bundled libraries:"
              ls -la Im8086/lib/
            fi
          fi

          tar -czf Im8086-ubuntu-latest.tar.gz Im8086/

      - name: Upload Linux artifacts
        if: matrix.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: Im8086-ubuntu-latest
          path: build/Im8086-ubuntu-latest.tar.gz
          retention-days: 3

  windows-build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
          C:\vcpkg\bootstrap-vcpkg.bat
          C:\vcpkg\vcpkg install sdl2:x64-windows sdl2-image:x64-windows
          echo "CMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: powershell

      - name: Create build directory
        run: mkdir build

      - name: Configure CMake
        run: |
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake
        shell: bash

      - name: Build
        run: |
          cd build
          cmake --build . --config Release

      - name: Run tests
        run: |
          cd build
          Release\test_emulator.exe
          Release\test_gui.exe
        shell: cmd

      - name: Create portable package
        run: |
          cd build
          rmdir /s /q Im8086 2>nul || echo "Directory doesn't exist"
          mkdir Im8086
          mkdir Im8086\samples
          mkdir Im8086\samples\txt
          mkdir Im8086\samples\asm
          mkdir Im8086\resources
          mkdir Im8086\lib

          copy Release\Im8086.exe Im8086\ 2>nul
          copy Release\test_emulator.exe Im8086\ 2>nul
          copy Release\test_gui.exe Im8086\ 2>nul

          copy ..\samples\sample_*.txt Im8086\samples\txt\ 2>nul
          copy ..\samples\tui\sample_*.asm Im8086\samples\asm\ 2>nul

          if exist "..\resources\*.png" (
            copy ..\resources\*.png Im8086\resources\ 2>nul
          )

          echo Detecting and bundling DLL files...

          if exist "C:\vcpkg\installed\x64-windows\bin\SDL2.dll" (
            copy "C:\vcpkg\installed\x64-windows\bin\SDL2.dll" Im8086\lib\
            echo SDL2.dll bundled to lib directory
          )
          if exist "C:\vcpkg\installed\x64-windows\bin\SDL2_ttf.dll" (
            copy "C:\vcpkg\installed\x64-windows\bin\SDL2_ttf.dll" Im8086\lib\
            echo SDL2_ttf.dll bundled to lib directory
          )
          if exist "C:\vcpkg\installed\x64-windows\bin\SDL2_image.dll" (
            copy "C:\vcpkg\installed\x64-windows\bin\SDL2_image.dll" Im8086\lib\
            echo SDL2_image.dll bundled to lib directory
          )
          if exist "C:\vcpkg\installed\x64-windows\bin\SDL2_mixer.dll" (
            copy "C:\vcpkg\installed\x64-windows\bin\SDL2_mixer.dll" Im8086\lib\
            echo SDL2_mixer.dll bundled to lib directory
          )

          for %%f in ("C:\vcpkg\installed\x64-windows\bin\*.dll") do (
            if /I "%%~nxf" NEQ "SDL2.dll" (
              copy "%%f" Im8086\lib\ 2>nul && echo %%~nxf bundled to lib directory
            )
          )

          echo Creating portable launcher...
          echo @echo off > Im8086\launch.bat
          echo echo Starting Im8086 Emulator... >> Im8086\launch.bat
          echo set "PATH=%%~dp0lib;%%PATH%%" >> Im8086\launch.bat
          echo %%~dp0Im8086.exe %%* >> Im8086\launch.bat

          echo Bundled DLL files:
          dir /b Im8086\lib\*.dll 2>nul || echo No DLL files found in lib directory

          powershell Compress-Archive -Path Im8086 -DestinationPath Im8086-windows-latest.zip
        shell: cmd

      - name: Upload Windows artifacts
        if: matrix.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: Im8086-windows-latest
          path: build/Im8086-windows-latest.zip
          retention-days: 3

  macos-build:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          brew install sdl2 sdl2_image ncurses
          
          echo "=== SDL2_image Installation Debug ==="
          echo "Homebrew prefix for sdl2_image:"
          brew --prefix sdl2_image || echo "brew --prefix sdl2_image failed"
          
          echo "Checking common header locations:"
          ls -la /opt/homebrew/include/SDL2/SDL_image.h 2>/dev/null || echo "Not found: /opt/homebrew/include/SDL2/SDL_image.h"
          ls -la /usr/local/include/SDL2/SDL_image.h 2>/dev/null || echo "Not found: /usr/local/include/SDL2/SDL_image.h"
          ls -la /opt/homebrew/include/SDL_image.h 2>/dev/null || echo "Not found: /opt/homebrew/include/SDL_image.h"
          ls -la /usr/local/include/SDL_image.h 2>/dev/null || echo "Not found: /usr/local/include/SDL_image.h"
          
          echo "Checking common library locations:"
          ls -la /opt/homebrew/lib/libSDL2_image* 2>/dev/null || echo "Not found: /opt/homebrew/lib/libSDL2_image*"
          ls -la /usr/local/lib/libSDL2_image* 2>/dev/null || echo "Not found: /usr/local/lib/libSDL2_image*"
          
          echo "SDL2_image pkg-config:"
          pkg-config --exists SDL2_image && echo "SDL2_image pkg-config found" || echo "SDL2_image pkg-config not found"
          pkg-config --cflags SDL2_image 2>/dev/null || echo "SDL2_image cflags not available"
          pkg-config --libs SDL2_image 2>/dev/null || echo "SDL2_image libs not available"
          echo "=== End Debug ==="

      - name: Create build directory
        run: mkdir build

      - name: Configure CMake
        run: |
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON --debug-output

      - name: Build
        run: |
          cd build
          cmake --build . --config Release

      - name: Run tests
        run: |
          cd build
          ./test_emulator

      - name: Create portable package
        run: |
          cd build
          rm -rf Im8086
          mkdir -p Im8086
          mkdir -p Im8086/samples/txt
          mkdir -p Im8086/samples/asm
          mkdir -p Im8086/resources
          mkdir -p Im8086/lib

          cp Im8086 Im8086/ 2>/dev/null || true
          cp test_emulator Im8086/ 2>/dev/null || true
          if [ -f "test_gui" ]; then cp test_gui Im8086/; fi

          cp ../samples/sample_*.txt Im8086/samples/txt/ 2>/dev/null || true
          cp ../samples/tui/sample_*.asm Im8086/samples/asm/ 2>/dev/null || true

          if [ -d "../resources" ]; then
            cp ../resources/*.png Im8086/resources/ 2>/dev/null || true
          fi

          if [ -f "Im8086/Im8086" ]; then
            echo "Detecting and bundling shared libraries for macOS..."

            LIBS=$(otool -L Im8086/Im8086 | grep -E "(SDL2|ncurses|tinfo)" | awk '{print $1}' | grep -v "Im8086" | grep -v "/usr/lib" | grep -v "/System/Library")
            
            for lib in $LIBS; do
              if [ -f "$lib" ]; then
                echo "Bundling library: $lib"
                cp "$lib" Im8086/lib/
              fi
            done
            
            if [ "$(ls -A Im8086/lib 2>/dev/null)" ]; then
              echo '#!/bin/bash' > Im8086/launch.sh
              echo 'DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"' >> Im8086/launch.sh
              echo 'export DYLD_LIBRARY_PATH="$DIR/lib:$DYLD_LIBRARY_PATH"' >> Im8086/launch.sh
              echo 'exec "$DIR/Im8086" "$@"' >> Im8086/launch.sh
              chmod +x Im8086/launch.sh
              echo "Created portable launcher with bundled libraries for macOS"
              echo "Bundled libraries:"
              ls -la Im8086/lib/
            fi
          fi

          tar -czf Im8086-macos-latest.tar.gz Im8086/

      - name: Upload macOS artifacts
        if: matrix.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: Im8086-macos-latest
          path: build/Im8086-macos-latest.tar.gz
          retention-days: 3

  release:
    needs: [linux-build, windows-build, macos-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get version from CMakeLists.txt
        id: get_version
        run: |
          VERSION=$(awk '/^project\(/,/\)/ {if(/VERSION/) {gsub(/.*VERSION /, ""); gsub(/ .*/, ""); print; exit}}' CMakeLists.txt)

          if [ -z "$VERSION" ]; then
            TIMESTAMP=$(date '+%Y%m%d%H%M%S')
            VERSION="dev-$TIMESTAMP"
            echo "⚠️  Could not extract version from CMakeLists.txt, using timestamp-based version"
          fi

          echo "Detected version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          TAG="${{ steps.get_version.outputs.tag }}"
          echo "Creating tag: $TAG"

          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists, skipping creation"
          else
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "$TAG"
            echo "Tag $TAG created and pushed successfully"
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.tag }}
          name: Release ${{ steps.get_version.outputs.tag }}
          files: |
            artifacts/*/Im8086-*.tar.gz
            artifacts/*/Im8086-*.zip
          generate_release_notes: true
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

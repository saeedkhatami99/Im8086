name: CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        build_type: [Debug, Release]
        
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libsdl2-dev \
          libgl1-mesa-dev \
          libncurses5-dev \
          clang-format \
          clang-tidy
    
    - name: Create build directory
      run: mkdir build
    
    - name: Configure CMake
      run: |
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DBUILD_TESTS=ON
    
    - name: Build
      run: |
        cd build
        make -j$(nproc)
    
    - name: Run tests
      run: |
        cd build
        ./test_emulator

  cross-platform-test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libsdl2-dev \
          libgl1-mesa-dev \
          libncurses5-dev
    
    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
        C:\vcpkg\bootstrap-vcpkg.bat
        C:\vcpkg\vcpkg install sdl2:x64-windows
        echo "CMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      shell: powershell
    
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install sdl2 ncurses
    
    - name: Create build directory
      run: mkdir build
    
    - name: Configure CMake
      run: |
        cd build
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake
        else
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON
        fi
      shell: bash
    
    - name: Build
      run: |
        cd build
        cmake --build . --config Release
    
    - name: Test (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd build
        ./test_emulator
    
    - name: Test (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd build
        Release\test_emulator.exe
        Release\test_gui.exe
      shell: cmd

    - name: Create portable package (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd build
        mkdir -p release-artifacts
        cp Im8086 test_emulator release-artifacts/ 2>/dev/null || true
        if [ -f "test_gui" ]; then cp test_gui release-artifacts/; fi
        cp ../samples/sample_*.txt release-artifacts/ 2>/dev/null || true
        cp ../samples/tui/sample_*.asm release-artifacts/ 2>/dev/null || true
        cp ../README.md release-artifacts/ 2>/dev/null || true
        if [ "${{ matrix.os }}" = "ubuntu-latest" ] && [ -f "Im8086" ]; then
          mkdir -p release-artifacts/lib
          SDL2_LIB=$(ldd Im8086 | grep SDL2 | awk '{print $3}' | head -1)
          NCURSES_LIB=$(ldd Im8086 | grep ncurses | awk '{print $3}' | head -1)
          TINFO_LIB=$(ldd Im8086 | grep tinfo | awk '{print $3}' | head -1)
          for lib in "$SDL2_LIB" "$NCURSES_LIB" "$TINFO_LIB"; do
            if [ -f "$lib" ]; then
              echo "Bundling library: $lib"
              cp "$lib" release-artifacts/lib/
            fi
          done
          if [ -d "release-artifacts/lib" ] && [ "$(ls -A release-artifacts/lib 2>/dev/null)" ]; then
            cat > release-artifacts/launch.sh << 'LAUNCHER_EOF'
            #!/bin/bash
            DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
            export LD_LIBRARY_PATH="$DIR/lib:$LD_LIBRARY_PATH"
            exec "$DIR/Im8086" "$@"
            LAUNCHER_EOF
            chmod +x release-artifacts/launch.sh
            echo "Created portable launcher with bundled libraries"
          fi
        fi
        cd release-artifacts
        tar -czf ../Im8086-${{ matrix.os }}.tar.gz *

    - name: Create portable package (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd build
        mkdir release-artifacts
        copy Release\Im8086.exe release-artifacts\ 2>nul
        copy Release\test_emulator.exe release-artifacts\ 2>nul
        copy Release\test_gui.exe release-artifacts\ 2>nul
        copy ..\samples\sample_*.txt release-artifacts\ 2>nul
        copy ..\samples\tui\sample_*.asm release-artifacts\ 2>nul
        copy ..\README.md release-artifacts\ 2>nul
        if exist "C:\vcpkg\installed\x64-windows\bin\SDL2.dll" (
          copy "C:\vcpkg\installed\x64-windows\bin\SDL2.dll" release-artifacts\
          echo SDL2.dll bundled for portable distribution
        )
        echo @echo off > release-artifacts\launch.bat
        echo echo Starting Im8086 Emulator... >> release-artifacts\launch.bat
        echo %%~dp0\Im8086.exe %%* >> release-artifacts\launch.bat
        cd release-artifacts
        tar -czf ..\Im8086-${{ matrix.os }}.tar.gz *
      shell: cmd

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Im8086-${{ matrix.os }}
        path: build/Im8086-${{ matrix.os }}.tar.gz
        retention-days: 3

  release:
    needs: [build-and-test, cross-platform-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Get version from CMakeLists.txt
      id: get_version
      run: |
        VERSION=$(grep -E "^project\(" CMakeLists.txt | grep -oE "VERSION [0-9]+\.[0-9]+\.[0-9]+" | cut -d' ' -f2)
        if [ -z "$VERSION" ]; then
          VERSION="1.0.0"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT
    
    - name: Create and push tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "${{ steps.get_version.outputs.tag }}" -m "Release ${{ steps.get_version.outputs.tag }}"
        git push origin "${{ steps.get_version.outputs.tag }}" || echo "Tag already exists"
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.tag }}
        name: Release ${{ steps.get_version.outputs.tag }}
        files: artifacts/*/Im8086-*.tar.gz
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Build and Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # Uncomment for releases on tags:
  # release:
  #   types: [published]

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: 64
            executable: 8086emu
          - os: ubuntu-latest
            arch: arm
            executable: 8086emu
          - os: macos-latest
            arch: 64
            executable: 8086emu
          - os: macos-latest
            arch: arm
            executable: 8086emu
          - os: windows-latest
            arch: 64
            executable: 8086emu.exe
          - os: windows-latest
            arch: arm
            executable: 8086emu.exe

    steps:
      - uses: actions/checkout@v4

      - name: Setup Build Environment (Linux ARM)
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV

      - name: Setup Build Environment (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Install MinGW-w64 for g++
          choco install mingw -y
          echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin" >> $GITHUB_PATH
        shell: powershell

      - name: Setup Build Environment (Windows ARM)
        if: matrix.os == 'windows-latest' && matrix.arch == 'arm'
        run: |
          # Windows ARM cross-compilation is experimental
          # Using clang with ARM64 target
          choco install llvm -y
          echo "CXX=clang++" >> $GITHUB_ENV
          echo "CXXFLAGS_ARM=--target=arm64-pc-windows-msvc -fuse-ld=lld" >> $GITHUB_ENV
        shell: powershell
        continue-on-error: true

      - name: Setup Build Environment (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Ensure Xcode command line tools are available
          xcode-select --install || true

      - name: Create Directories
        run: |
          mkdir -p build
          mkdir -p obj
          mkdir -p obj/instructions
        shell: bash

      - name: Build Project
        run: make ARCH=${{ matrix.arch }}
        shell: bash
        continue-on-error: ${{ matrix.os == 'windows-latest' && matrix.arch == 'arm' }}

      - name: Test Build
        run: |
          if [ -f "build/${{ matrix.executable }}" ]; then
            echo "Build successful: build/${{ matrix.executable }}"
            ls -la build/
          else
            echo "Build failed: executable not found"
            if [ "${{ matrix.os }}" = "windows-latest" ] && [ "${{ matrix.arch }}" = "arm" ]; then
              echo "Windows ARM build is experimental and may fail"
              exit 0
            else
              exit 1
            fi
          fi
        shell: bash

      - name: Create Distribution Package
        if: success()
        run: make distcheck ARCH=${{ matrix.arch }}
        shell: bash

      - name: Upload Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: 8086emu-${{ matrix.arch }}-${{ runner.os }}
          path: build/${{ matrix.executable }}

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare Release Assets
        run: |
          mkdir -p release-assets
          # Rename artifacts to have unique names
          for dir in artifacts/*/; do
            if [ -d "$dir" ]; then
              artifact_name=$(basename "$dir")
              echo "Processing artifact: $artifact_name"
              
              # Find the executable in the artifact directory
              if [ -f "$dir/8086emu" ]; then
                cp "$dir/8086emu" "release-assets/${artifact_name}"
                echo "Created: release-assets/${artifact_name}"
              elif [ -f "$dir/8086emu.exe" ]; then
                cp "$dir/8086emu.exe" "release-assets/${artifact_name}.exe"
                echo "Created: release-assets/${artifact_name}.exe"
              fi
            fi
          done
          
          echo "Release assets prepared:"
          ls -la release-assets/

      - name: Set Release Info
        id: release_info
        run: |
          TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          RELEASE_TAG="build-${TIMESTAMP}-${SHORT_SHA}"
          RELEASE_DATE=$(date +'%Y-%m-%d %H:%M:%S UTC')
          echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_ENV
          echo "RELEASE_NAME=8086 Emulator Build ${TIMESTAMP}" >> $GITHUB_ENV
          echo "RELEASE_DATE=${RELEASE_DATE}" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: ${{ env.RELEASE_NAME }}
          draft: false
          prerelease: true
          body: |
            ## 8086 Emulator Build
            
            **Commit:** ${{ github.sha }}
            **Date:** ${{ env.RELEASE_DATE }}
            
            ### Features
            - Complete 8086 instruction set emulation
            - Modular architecture with separate instruction categories
            - Enhanced features: memory operands, REP prefixes, I/O simulation
            - Comprehensive test samples (25 samples from beginner to expert)
            
            ### Downloads
            Choose the appropriate build for your platform:
            - **Linux (x64)**: `8086emu-64-Linux`
            - **Linux (ARM64)**: `8086emu-arm-Linux`
            - **macOS (x64)**: `8086emu-64-macOS` 
            - **macOS (ARM64)**: `8086emu-arm-macOS`
            - **Windows (x64)**: `8086emu-64-Windows.exe`
            - **Windows (ARM64)**: `8086emu-arm-Windows.exe` *(experimental)*
            
            ### Usage
            1. Download the appropriate executable for your platform
            2. Run `./8086emu-*` (Linux/macOS) or `8086emu-*.exe` (Windows)
            3. Get sample files from the repository's `samples/` directory
            4. Use `?` command for help
            
            ### Notes
            - **Windows ARM64**: Experimental build using cross-compilation
            - **Linux ARM64**: Cross-compiled for aarch64 architecture
            - **macOS ARM64**: Native Apple Silicon build
            
          files: release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
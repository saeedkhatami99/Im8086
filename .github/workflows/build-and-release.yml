name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  TARGET: 8086emu

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: linux-x64
            cc: gcc
            cxx: g++
            deps: libncurses5-dev
          - os: macos-latest
            target: macos-x64
            cc: clang
            cxx: clang++
            deps: ncurses
          - os: windows-latest
            target: windows-x64
            cc: gcc
            cxx: g++
            deps: ""

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup MSYS2 (Windows)
      if: runner.os == 'Windows'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-make
          mingw-w64-x86_64-pdcurses
          make

    - name: Install dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y ${{ matrix.deps }}

    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install ${{ matrix.deps }}

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        # PDCurses should already be installed via MSYS2 setup
        echo "Windows dependencies installed via MSYS2"

    - name: Set up build environment
      shell: bash
      run: |
        echo "CC=${{ matrix.cc }}" >> $GITHUB_ENV
        echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV

    - name: Build (Release) - Windows
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        make BUILD=release TARGET=${{ env.TARGET }}

    - name: Build (Release) - Unix
      if: runner.os != 'Windows'
      shell: bash
      run: |
        make BUILD=release TARGET=${{ env.TARGET }}

    - name: Build (Debug) - Windows
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        make BUILD=debug TARGET=${{ env.TARGET }}

    - name: Build (Debug) - Unix
      if: runner.os != 'Windows'
      shell: bash
      run: |
        make BUILD=debug TARGET=${{ env.TARGET }}

    - name: Run tests/checks - Windows
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        make check BUILD=release TARGET=${{ env.TARGET }}

    - name: Run tests/checks - Unix
      if: runner.os != 'Windows'
      shell: bash
      run: |
        make check BUILD=release TARGET=${{ env.TARGET }}

    - name: Create distribution - Windows
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        make dist BUILD=release TARGET=${{ env.TARGET }}

    - name: Create distribution - Unix
      if: runner.os != 'Windows'
      shell: bash
      run: |
        make dist BUILD=release TARGET=${{ env.TARGET }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.TARGET }}-${{ matrix.target }}
        path: |
          build/${{ env.TARGET }}*
          build/*.zip
        retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Prepare release assets
      run: |
        mkdir -p release-assets/
        find artifacts/ -name "*.zip" -exec cp {} release-assets/ \;
        ls -la release-assets/

    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Create draft release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.version.outputs.version }}
        tag_name: ${{ steps.version.outputs.version }}
        draft: true
        prerelease: ${{ contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}
        files: |
          release-assets/*
        body: |
          ## Changes in ${{ steps.version.outputs.version }}
          
          ### Features
          - 
          
          ### Bug Fixes
          - 
          
          ### Build Information
          - Built from commit: ${{ github.sha }}
          - Build date: ${{ github.event.head_commit.timestamp }}
          
          ### Downloads
          - **Linux x64**: `${{ env.TARGET }}_linux.zip`
          - **macOS x64**: `${{ env.TARGET }}_macos.zip`
          - **Windows x64**: `${{ env.TARGET }}_other.zip`
          
          ## Installation
          1. Download the appropriate package for your platform
          2. Extract the archive
          3. Run the `${{ env.TARGET }}` executable
          
          ## Usage
          ```bash
          # Run REPL mode
          ./${{ env.TARGET }}
          
          # Run TUI mode with a program file
          ./${{ env.TARGET }} --tui program.txt
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  continuous-build:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Create development build summary
      run: |
        echo "## Development Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Build Date:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Artifacts:" >> $GITHUB_STEP_SUMMARY
        find artifacts/ -name "*.zip" | while read file; do
          echo "- $(basename "$file")" >> $GITHUB_STEP_SUMMARY
        done